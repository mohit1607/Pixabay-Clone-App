{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","hits","sethits","loading","setloading","Page","setPage","search","setSearch","searchClick","setSearchClick","Url","scrollToTop","window","scrollTo","top","behavior","useEffect","fetch","then","response","json","data","console","log","className","class","type","placeholder","onChange","event","target","value","id","onClick","map","currEle","ind","src","webformatURL","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAoGeA,MA/Ff,WAEE,MAAyBC,mBAAS,IAAlC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAA+BF,oBAAS,GAAxC,mBAAQG,EAAR,KAAiBC,EAAjB,KACA,EAAyBJ,mBAAS,GAAlC,mBAAQK,EAAR,KAAcC,EAAd,KACA,EAA6BN,mBAAS,IAAtC,mBAAQO,EAAR,KAAgBC,EAAhB,KACA,EAAwCR,oBAAS,GAAjD,mBAAQS,EAAR,KAAsBC,EAAtB,KAuBMC,EAAG,+EAA2EN,EAA3E,cAAqFE,GAiBxFK,EAAe,WACnBC,OAAOC,SAAS,CACdC,IAAK,EACLC,SAAU,YASd,OAJAC,qBAAU,WAtBRb,GAAW,GACXc,MAAMP,GACHQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZpB,EAAQoB,EAAKrB,SAEfG,GAAW,KAiBZ,CAACC,EAAKI,IAGP,qCAEC,qBAAKgB,UAAU,6BAAf,SACC,oBAAIA,UAAU,2BAAd,iCAGF,qBAAKA,UAAU,YAAf,SACE,sBAAKC,MAAM,oCAAX,UACE,uBAAOC,KAAK,OAAOD,MAAM,4BAA4BE,YAAY,qBACjEC,SA5Ca,SAACC,GAClBP,QAAQC,IAAIM,EAAMC,OAAOC,OACzBxB,EAAUsB,EAAMC,OAAOC,QA0CG,aAAW,uBACjC,mBAAiB,iBACjB,sBAAMN,MAAM,mBAAmBO,GAAG,eAAeC,QA5BhC,WACrBxB,GAAgBD,IA2BZ,yBAIL,qBAAKgB,UAAU,YAAf,SACG,qBAAKA,UAAU,wCAAf,SACExB,EAAKkC,KAAI,SAACC,EAAQC,GAChB,OACE,qBAAKC,IAAMF,EAAQG,aAAcd,UAAU,kBAA8Be,IAAK,cAAZH,EAAI,UAM9E,qBAAKZ,UAAU,YAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,wBAAQS,QArEG,WACZ7B,GAAQ,IACTC,EAAQD,EAAK,GACbO,MAkE8Ba,UAAU,sBAAsBQ,GAAG,aAA/D,kBACA,qBAAIR,UAAU,WAAd,kBAA+BpB,KAC/B,wBAAQ6B,QA5EG,WACf5B,EAAQD,EAAM,GACdO,KA0E+Ba,UAAU,gCAAiCQ,GAAG,aAAzE,SAAwF9B,EAAW,UAAY,kBCjFxGsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6fb49400.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  \n  const [ hits, sethits] = useState([]);\n  const [ loading, setloading] = useState(false);\n  const [ Page, setPage] = useState(1);\n  const [ search, setSearch] = useState(\"\");\n  const [ searchClick , setSearchClick] = useState(false);\n\n//  const refreshPage = ()=>{\n  //  window.location.reload();\n// }   I am delaying it for future. {major problem}\n\n  const nextpage = () => {\n    setPage(Page +1);\n    scrollToTop();\n  }\n\n  const backpage = () => {\n    if(Page >= 1){\n      setPage(Page-1);\n      scrollToTop();\n    }\n  }\n\n  const inputEvent = (event) => {\n    console.log(event.target.value);\n    setSearch(event.target.value)\n  }\n\n  const Url = `https://pixabay.com/api/?key=17392926-1008cec1ed6e3cf7088aafc7e&page=${Page}&q=${search}`;\n\n  const getData = () => {\n    setloading(true);\n    fetch(Url)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        sethits(data.hits);\n      });\n      setloading(false);\n  }\n\n  const searchClickfun = () => {\n    setSearchClick(!searchClick);\n  }\n\n  const scrollToTop  = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"   // browser object model\n    });\n  }\n  \n  \n  useEffect(() => {\n   getData();\n  }, [Page,searchClick] );  // this empty array means that it is only run when component did mount or refresh.\n \n  return (\n    <>\n\n     <div className=\"container-fluid bg-success\">\n      <h1 className=\" p-5 text-light me-auto \">Pixabay App Clone</h1>\n     </div>\n    \n    <div className=\"container\">\n      <div class=\"input-group mx-auto backImage p-5\">\n        <input type=\"text\" class=\"form-control p-3 border-1\" placeholder=\"Search Images Here\"\n        onChange={inputEvent} aria-label=\"Recipient's username\" \n        aria-describedby=\"basic-addon2\"/>\n        <span class=\"input-group-text\" id=\"basic-addon2\" onClick={searchClickfun}>Search</span>\n    </div>\n    </div>\n   \n   <div className=\"container\">\n      <div className=\" d-flex flex-wrap align-self-baseline\">\n      { hits.map((currEle,ind) => {\n          return(\n            <img src ={currEle.webformatURL} className='m-1 image-fluid' key={ind+1} alt ='pixabayPic'/>\n          )\n        })}\n      </div>\n   </div>\n\n    <div className=\"container\">\n      <div className=\"m-5  p-4 d-flex\">\n        <button onClick={backpage}  className=\"btn btn-success p-4\" id='nextbutton'>Back</button>\n        <h3 className=\"mx-auto \">Page {Page}</h3>\n        <button onClick={nextpage} className=\"btn btn-success p-4 float-end\"  id='backbutton'>{(loading) ? \"loading\" : \"Next\"}</button>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}